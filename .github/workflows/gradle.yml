# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  job1:

    runs-on: ubuntu-latest
    name: build and deploy to minikube
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Run chmod to make gradlew executable
      run: chmod +x ./gradlew
    - name: Build with Gradle
      uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
      with:
        arguments: build
    - name: start minikube
      id: minikube
      uses: medyagh/setup-minikube@master
      # let's run kubernetes to see the pods
    - name: Try the Cluster!
      run: kubectl get pods -A
    - name: Build image
      run: | 
        export SHELL=/bin/bash
        eval $(minikube -p minikube docker-env)
        docker build -f ./Dockerfile -t hello-world:0.0.1 .
        echo -n "verifying images"
        docker images  
    - name: Deploy to minikube
      run: |
        kubectl apply -f k8s/deployment.yaml
        kubectl get pods 
    - name: Test service URLs
      run: |
        minikube service list
        minikube service java-app --url
